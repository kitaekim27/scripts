#!/bin/sh

set -o errexit -o nounset -o noglob -o pipefail

info() {
	echo "init:" "${@}"
}

error() {
	info "${@}" >&2
}

rescue_shell() {
	error "Something went wrong! Dropping to a rescue shell."
	exec sh
}

sread() {
	read_prompt="${1}"
	read_variable="${2}"

	printf "%s" "${read_prompt}"
	stty -echo
	read -r "${read_variable}"
	stty echo
	echo
}

trap rescue_shell EXIT

export PATH="${PATH}:/usr/local/bin"

# We use udev here. Make sure not to use any uevnet helper.
[ -w /sys/kernel/uevent_helper ] && echo > /sys/kernel/uevent_helper

mount -t proc proc /proc
mount -t devtmpfs udev /dev
mkdir /dev/pts || :
mount -t devpts devpts /dev/pts
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /tmp

/lib/systemd/systemd-udevd --daemon --resolve-names="never"
udevadm trigger --type="subsystems" --action="add"
udevadm trigger --type="devices" --action="add"
udevadm settle || :

cat <<"EOF"
 _     _____ _ _  ___               ___       _     _ _
| |__ |___ /| | |/ _ \   __      __/ _ \ _ __| | __| | |
|  _ \  |_ \| | | | | |  \ \ /\ / / | | |  __| |/ _` | |
| | | |___) | | | |_| |   \ V  V /| |_| | |  | | (_| |_|
|_| |_|____/|_|_|\___( )   \_/\_/  \___/|_|  |_|\__,_(_)
                     |/
EOF

info "The initramfs is successfully loaded!"
info "Start to initialize the system."

# XXX: Hard-coded keyboard config.
#      You can find all keymaps at /usr/share/keymaps.
info "Configure the keyboard."
loadkeys us
kbd_mode -u

info "Parse the kernel parameters."
read -r cmdline < /proc/cmdline
for cmd in ${cmdline}
do
	case "${cmd}" in
		cryptroot=*)
			cmd="${cmd#cryptroot=}"
			case "${cmd}" in
				PARTUUID=*)
					count=0
					while true
					do
						if cryptroot=$(findfs PARTUUID="${cmd#PARTUUID=}")
						then
							info "Detected the encrypted root partition!"
							info "cryptroot=${cryptroot}"
							break
						fi

						count=$((count+1))
						if [ "${count}" = 50 ]
						then
							error "Failed to detect the root partition!"
							exit 1
						fi

						sleep 0.3
					done
					;;
			esac
			;;
	esac
done

info "Decrypt the root partition."
while true
do
	sread "Enter a passphrase for the root partition: " passphrase
	if ! luksphrase=$(mkpassphrase "${passphrase}" 2>/dev/null | sed  "s/result = \(.*\)/\1/")
	then
		error "Can't unseal the key stored in TPM!"
		error "The system might be modified to steal your information!"
		printf "%s" "Do you want to use the secondary passphrase to open the root partition? [y/n]: "
		read -r answer
		case "${answer}" in
			y* | Y*)
				count=0
				while true
				do
					sread "Enter the secondary passphrase for the root partition: " secondphrase
					if printf "%s" "${secondphrase}" | cryptsetup luksOpen --key-file="-" "${cryptroot}" root
					then
						break
					fi

					count=$((count+1))
					if [ "${count}" = 10 ]
					then
						error "Failed to open the root partition!"
						exit 1
					fi

					error "Failed to open the root partition! Try again."
				done
				break
				;;
			n* | N*)
				info "Execute the shell for debugging."
				exit 1
				;;
			*)
				error "Invalid input! Try again."
				;;
		esac
	fi

	if printf "%s" "${luksphrase}" | hex2data | cryptsetup luksOpen --key-file="-" "${cryptroot}" root
	then
		break
	fi

	error "Failed to decrypt the root partition!"
done

info "Mount the root partition."
mkdir -p /mnt/root
mount -t btrfs -o noatime,subvol=/deploy/target /dev/mapper/root /mnt/root

info "Clean up."
udevadm control --exit

info "Execute the init process!"
exec switch_root /mnt/root /sbin/init
