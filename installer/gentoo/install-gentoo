#!/bin/bash
#   ____            _                _     _
#  / ___| ___ _ __ | |_ ___   ___   | |   (_)_ __  _   ___  __
# | |  _ / _ \ '_ \| __/ _ \ / _ \  | |   | | '_ \| | | \ \/ /
# | |_| |  __/ | | | || (_) | (_) | | |___| | | | | |_| |>  <
#  \____|\___|_| |_|\__\___/ \___/  |_____|_|_| |_|\__,_/_/\_\
#
#  ___           _        _ _
# |_ _|_ __  ___| |_ __ _| | | ___ _ __
#  | || '_ \/ __| __/ _` | | |/ _ \ '__|  Author: Kitae Kim
#  | || | | \__ \ || (_| | | |  __/ |     Email:  kitaekim27 at gmail.com
# |___|_| |_|___/\__\__,_|_|_|\___|_|     Desc:   A shell script for automating
#                                                 installation of Gentoo Linux.
#

set -o errexit -o nounset -o noglob -o pipefail

info() {
	echo "${THIS_SCRIPT}:" "${@}"
}

error() {
	info "${@}" >&2
}

get_passphrase() {
	local checkphrase
	while true
	do
		read -srp "${THIS_SCRIPT}: ${1}" "${2}"; echo
		read -srp "${THIS_SCRIPT}: Enter the passphrase again: " checkphrase; echo
		[ "$(eval echo "\$${2}")" = "${checkphrase}" ] && break
		info "You've entered different passphrases! Try again."
	done
}

main_check_network() {
	if ! nc -zw1 google.com 443
	then
		error "Can not connect to the internet!"
		exit 1
	fi
}

main_prepare_installer() {
	info "Sync the installer time with ntp.org."
	ntpd -q -g

	# TODO: Verify the downloaded files.
	info "Download a stage 3 tarball."
	local arch="amd64"
	local mirror="http://ftp.daum.net/gentoo/releases"
	local latest_tarball
	latest_tarball="$(wget --quiet --output-document="-" \
		"${mirror}/${arch}/autobuilds/latest-stage3-amd64-hardened-nomultilib-openrc.txt" \
				| awk '!/#/{print $1}')"
	wget --no-verbose --directory-prefix="${THIS_DIR}/download" \
		"${mirror}/${arch}/autobuilds/${latest_tarball}"

	info "Install the scripts into the installer."
	find -L "${THIS_DIR}/tools" -mindepth 1 -maxdepth 1 \
		-exec cp --recursive {} /usr/local/bin \;

	info "Configure Portage make.conf file."
	cat <<-EOF >> /etc/portage/make.conf
	MAKEOPTS="-j$(nproc)"
	EOF

	info "Configure Portage mirrors."
	echo "${PORTAGE_MIRRORS}" >> /etc/portage/make.conf

	info "Install tpm2-tools in the installer."
	${EMERGE} --autounmask --autounmask-continue app-crypt/tpm2-tools
}

main_prepare_storage() {
	lsblk
	read -rp "Select a root storage: " ROOT_STORAGE
	fdisk "/dev/${ROOT_STORAGE}"
	sync

	lsblk
	read -rp "Select an efi partition: " PARTITION_UEFI
	read -rp "Select a swap partition: " PARTITION_SWAP
	read -rp "Select a root partition: " PARTITION_ROOT
}

main_configure_storage() {
	info "Format an efi partition in vfat."
	mkfs.vfat "/dev/${PARTITION_UEFI}"

	info "Set swap on ${PARTITION_SWAP}."
	mkswap "/dev/${PARTITION_SWAP}"
	swapon "/dev/${PARTITION_SWAP}"

	info "Seal a random key into TPM."
	tpmsealrandkey

	info "Encrypt the root partition."
	local luksphrase
	luksphrase=$(mkpassphrase "${CRYPT_PASSPHRASE}" | sed "s/result = \(.*\)/\1/")
	printf "%s" "${luksphrase}" | hex2data | cryptsetup luksFormat \
		--type="luks2" --key-file="-" "/dev/${PARTITION_ROOT}"

	info "Add a secondary passphrase for the root partition."
	printf "%s" "${luksphrase}" | hex2data | cryptsetup luksAddKey \
		--key-file="-" "/dev/${PARTITION_ROOT}" \
		<(printf "%s" "${CRYPT_SECONDPHRASE}")

	info "Decrypt the root partition for further installation."
	printf "%s" "${luksphrase}" | hex2data | cryptsetup luksOpen \
		--key-file="-" "/dev/${PARTITION_ROOT}" root

	info "Format the root partition in btrfs."
	mkfs.btrfs /dev/mapper/root

	info "Mount the root partition."
	mkdir --parents /mnt/root
	mount /dev/mapper/root /mnt/root

	info "Set the filesystem hierarchy layout in the root partition."
	mkdir --parents /mnt/root/deploy
	mkdir --parents /mnt/root/snapshots

	info "Create a btrfs subvolume to install the system."
	# Here, note that our initial subvolume is image-a.
	btrfs subvolume create /mnt/root/deploy/image-a
	ln --symbolic /deploy/image-a /mnt/root/deploy/target
	ln --symbolic /deploy/none /mnt/root/deploy/current
	# This makes mounttab valid so that we can see / mount entry inside the
	# chroot.
	mount --types="btrfs" --options="noatime,subvol=/deploy/target" \
		/dev/mapper/root /mnt/root/deploy/image-a

	INSTALL_ROOT="/mnt/root/deploy/image-a"
}

main_bootstrap_system() {
	info "Extract the stage 3 tarball into ${INSTALL_ROOT}."
	find "${THIS_DIR}/download" -iname "stage3-*.tar.xz" \
		-exec tar --directory="${INSTALL_ROOT}" \
			--extract --preserve-permissions --file={} \
			--xattrs-include='*.*' --numeric-owner \;

	info "Create a mount point for the btrfs root subvolume."
	mkdir --parents "${INSTALL_ROOT}/rootvolume"
}

main_prepare_chroot() {
	info "Mount pseudo filesystems in the installation."
	mount-pseudofs "${INSTALL_ROOT}"

	info "Configure DNS of the installation."
	cp --dereference /etc/resolv.conf "${INSTALL_ROOT}/etc/resolv.conf"

	info "Set the initramfs source directory in the installation."
	mkdir --parents "${INSTALL_ROOT}/var/lib/initramfs"
	find "${THIS_DIR}/initramfs" -mindepth 1 -maxdepth 1 \
		-exec cp --archive {} "${INSTALL_ROOT}/var/lib/initramfs" \;

	info "Copy config files into the installation."
	cp --recursive "${THIS_DIR}/config" "${INSTALL_ROOT}"

	info "Install my scripts into the installation."
	find -L "${THIS_DIR}/tools" -mindepth 1 -maxdepth 1 \
		-exec cp --recursive {} "${INSTALL_ROOT}/usr/local/bin/" \;
}

chroot_mount_filesystems() {
	info "Mount partitions using fstab."
	mount /boot
	mount /tmp
	mkdir --parents /var/tmp/portage
	mount /var/tmp/portage
}

chroot_configure_portage() {
	info "Install Portage environment config files."
	mkdir --parents /etc/portage/env
	find /config/etc/portage/env -type f -exec cp {} /etc/portage/env \;

	if [ -d /etc/portage/package.use ]
	then
		info "Make the Portage package.use a single file."
		rm --recursive /etc/portage/package.use
		touch /etc/portage/package.use
	fi

	if [ -d /etc/portage/package.env ]
	then
		info "Make the Portage package.env a single file."
		rm --recursisve /etc/portage/package.env
		touch /etc/portage/package.env
	fi

	info "Configure the Portage make.conf file."
	cat <<-EOF >> /etc/portage/make.conf
	MAKEOPTS="-j$(nproc)"
	USE="minimal elogind X gui bluetooth networkmanager dbus dist-kernel -systemd"
	ACCEPT_LICENSE="@BINARY-REDISTRIBUTABLE"
	${PORTAGE_MIRRORS}
	EOF

	info "Configure the Portage ebuild repositories."
	mkdir --parents /etc/portage/repos.conf
	cp /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf
	emerge-webrsync
}

chroot_configure_system() {
	info "Generate the fstab."
	PARTUUID_UEFI=$(blkid -o value -s PARTUUID "/dev/${PARTITION_UEFI}") \
	PARTUUID_SWAP=$(blkid -o value -s PARTUUID "/dev/${PARTITION_SWAP}") \
	PARTUUID_ROOT=$(blkid -o value -s PARTUUID "/dev/${PARTITION_ROOT}") \
		envsubst < /config/etc/fstab.tmpl > /etc/fstab

	info "Set the timezone to Asia/Seoul."
	echo "Asia/Seoul" > /etc/timezone
	${EMERGE} --config sys-libs/timezone-data

	info "Set the hostname."
	sed -i "s/localhost/${HOST_NAME}/g" /etc/conf.d/hostname /etc/hosts

	info "Create a default user."
	useradd --create-home --groups="users,wheel" --shell="/bin/bash" "${USER_NAME}"
	echo "${USER_NAME}:${USER_PASSWORD}" | chpasswd

	info "Setup global XDG environment variables."
	cat <<-"EOF" >> /etc/profile

	# XDG Base Directory Environment Variables.
	# Where user-specific data files should be written.
	export XDG_DATA_HOME="${HOME}/.local/share"
	# Where user-specific configuration files should be written.
	export XDG_CONFIG_HOME="${HOME}/.config"
	# Where user-specific state data should be written.
	export XDG_STATE_HOME="${HOME}/.local/state"
	# Directories relative to which data files should be searched.
	export XDG_DATA_DIRS="/usr/local/share:/usr/share"
	# Directories relative to which configuration files should be searched.
	export XDG_CONFIG_DIRS="/etc/xdg"
	# Where user-specific non-essential (cached) data should be written.
	export XDG_CACHE_HOME="${HOME}/.cache"
	# Where user-specific runtime files and other file objects should be placed.
	export XDG_RUNTIME_DIR=""
	EOF

	info "Reload the environment."
	env-update
	source /etc/profile
}

chroot_install_firmwares() {
	if grep --quiet --ignore-case "AMD" /proc/cpuinfo
	then
		info "AMD CPU detected. Install AMD microcodes."
		# AMD microcodes are shipped in the sys-kernel/linux-firmware package.
		info "Enable USE flag \"initramfs\" of sys-kernel/linux-firmware"
		echo "sys-kernel/linux-firmware initramfs" >> /etc/portage/package.use
	elif grep --quiet --ignore-case "Intel" /proc/cpuinfo
	then
		info "Intel CPU detected. Install Intel microcodes."
		info "Enable USE flag \"initramfs\" of sys-firmware/intel-microcode"
		# This USE flag generates microcode cpio at /boot so that GRUB automatically
		# detect and generate config with it.
		echo "sys-firmware/intel-microcode initramfs" >> /etc/portage/package.use

		info "Install the intel microcode package."
		${EMERGE} sys-firmware/intel-microcode
	else
		info "Can not determine CPU manufacturer. Do not install microcodes."
	fi

	info "Install the linux firmwares."
	${EMERGE} sys-kernel/linux-firmware
}

chroot_install_kernel() {
	# Install binary distribution kernel as a solid default kernel so that
	# you can customize the kernel without worrying system breakage.
	info "Install the linux kernel."
	echo "sys-kernel/gentoo-kernel-bin hardened" >> /etc/portage/package.use
	${EMERGE} sys-kernel/gentoo-kernel-bin

	# /usr/src/linux symlink refers to the source tree corresponding to the
	# currently running kernel.
	info "Create a symlink /usr/src/linux."
	# As we're installing initially, we assume that there's only one kernel
	# available.
	eselect kernel set 1
}

chroot_install_initramfs() {
	info "Install fzf to build an initramfs."
	${EMERGE} app-shells/fzf

	info "Enable ccache to build an initramfs."
	cat <<-EOF >> /etc/portage/package.env
	sys-apps/busybox ccache.conf
	app-crypt/tpm2-tools ccache.conf
	sys-fs/cryptsetup ccache.conf
	app-editors/vim-core ccache.conf
	EOF

	info "Build and install an initramfs."
	emerge-initramfs
}

chroot_install_system_daemons() {
	info "Enable the elogind service."
	rc-update add elogind boot

	info "Install system daemons."
	echo "app-admin/logrotate cron" >> /etc/portage/package.use
	${EMERGE} \
		sys-process/fcron \
		net-misc/chrony \
		net-misc/networkmanager \
		app-admin/rsyslog \
		app-admin/logrotate

	info "Enable system daemons."
	rc-update add fcron default
	rc-update add chronyd default
	rc-update add NetworkManager default
	rc-update add rsyslog default
}

chroot_install_system_utils() {
	info "Install system utils."
	${EMERGE} sys-fs/btrfs-progs app-portage/gentoolkit dev-vcs/git

	info "Install doas instead of sudo."
	${EMERGE} app-admin/doas
	install --mode="600" /config/etc/doas.conf /etc/doas.conf
}

chroot_install_bootloader() {
	info "Install GRUB2 bootloader."
	echo "sys-boot/grub -theme -nls" >> /etc/portage/package.use
	cat <<-EOF >> /etc/portage/make.conf
	GRUB_PLATFORMS="efi-64"
	EOF
	${EMERGE} sys-boot/grub
	grub-install --efi-directory="/boot" --removable
	cat <<-EOF >> /etc/default/grub
	GRUB_CMDLINE_LINUX="quiet cryptroot=PARTUUID=$(blkid -o value -s PARTUUID /dev/"${PARTITION_ROOT}")"
	EOF
	grub-mkconfig --output="/boot/grub/grub.cfg"
}

chroot_install_desktop() {
	info "Install XOrg server."
	# Without disabling `minimal` USE flag, we can't install drivers.
	echo "x11-base/xorg-server -minimal" >> /etc/portage/package.use
	${EMERGE} x11-base/xorg-server
	cat <<-"EOF" >> "/home/${USER_NAME}/.bash_profile"
	# Add doom emacs binary location to PATH variable.
	export PATH="${PATH}:${HOME}/.emacs.d/bin"

	[ -t 0 ] && [ "$(tty)" = /dev/tty1 ] && [ -z "${DISPLAY}" ] && exec startx &>/dev/null
	EOF
	env-update
	source /etc/profile

	info "Install X11 utils."
	${EMERGE} x11-apps/xrandr x11-apps/setxkbmap

	info "Install XDG utils."
	${EMERGE} x11-misc/xdg-utils

	info "Install fonts."
	${EMERGE} media-fonts/fonts-meta

	info "Install build dependencies for dwm window manager."
	${EMERGE} x11-libs/libXinerama x11-libs/libXft

	info "Build and install dwm window manager."
	git clone --branch="release" https://github.com/kitaekim27/dwm /usr/src/dwm
	make --directory=/usr/src/dwm --jobs="$(nproc)"
	make --directory=/usr/src/dwm --jobs="$(nproc)" install
	cat <<-"EOF" >> "/home/${USER_NAME}/.xinitrc"
	# Set desktop resolution using `xrandr`.
	# xrandr --output Virtual-1 --mode 1440x900

	# Switch capslock key and escape key.
	# setxkbmap -option caps:swapescape

	exec dbus-launch --sh-syntax --exit-with-x11 dwm
	EOF
	chown "${USER_NAME}:${USER_NAME}" "/home/${USER_NAME}/.xinitrc"

	info "Install emacs, a terminal emulator looks like a text editor."
	echo "app-editors/emacs jit xft json" >> /etc/portage/package.use
	${EMERGE} app-editors/emacs

	info "Install doom emacs, a emacs configuration framework."
	git clone --depth=1 https://github.com/doomemacs/doomemacs "/home/${USER_NAME}/.emacs.d"
	chown -R "${USER_NAME}:${USER_NAME}" "/home/${USER_NAME}/.emacs.d"

	info "Set ownership of files in the user's home directory."
	find "/home/${USER_NAME}" -mindepth 1 -maxdepth 1 \
		-exec chown --recursive "${USER_NAME}:${USER_NAME}" {} \;
}

chroot_cleanup() {
	info "Clean up installation artipacts."
	rm --recursive /config
}

chroot_main() {
	chroot_configure_portage
	chroot_configure_system
	chroot_mount_filesystems

	info "Update @world Portage set."
	# Here, we use `--jobs="$(nproc)"` flag which may cause memory
	# exhaustion. The assumptions are as we will use a bare minimum profile,
	# we don't have any packages consume memory drastcally such as a desktop
	# environment and the @world set usually contain many packages that
	# actually does not build anything but just setting up the system.
	${EMERGE} --jobs="$(nproc)" --update --deep --newuse @world

	chroot_install_system_utils
	chroot_install_system_daemons

	chroot_install_firmwares
	chroot_install_kernel
	chroot_install_initramfs
	chroot_install_bootloader

	chroot_install_desktop
}

main() {
	main_check_network
	main_prepare_storage
	main_prepare_installer
	main_configure_storage
	main_bootstrap_system
	main_prepare_chroot

	info "chroot into ${INSTALL_ROOT} and execute chroot_main()."
	chroot "${INSTALL_ROOT}" /bin/bash -c "
		set -o errexit -o nounset -o noglob -o pipefail

		$(declare -f info)
		$(declare -f error)
		$(declare -f chroot_configure_portage)
		$(declare -f chroot_configure_system)
		$(declare -f chroot_mount_filesystems)
		$(declare -f chroot_install_system_utils)
		$(declare -f chroot_install_system_daemons)
		$(declare -f chroot_install_firmwares)
		$(declare -f chroot_install_kernel)
		$(declare -f chroot_install_initramfs)
		$(declare -f chroot_install_bootloader)
		$(declare -f chroot_install_desktop)
		$(declare -f chroot_cleanup)
		$(declare -f chroot_main)

		THIS_SCRIPT='${THIS_SCRIPT}'
		ROOT_STORAGE='${ROOT_STORAGE}'
		PARTITION_UEFI='${PARTITION_UEFI}'
		PARTITION_SWAP='${PARTITION_SWAP}'
		PARTITION_ROOT='${PARTITION_ROOT}'
		PORTAGE_MIRRORS='${PORTAGE_MIRRORS}'
		HOST_NAME='${HOST_NAME}'
		USER_NAME='${USER_NAME}'
		USER_PASSWORD='${USER_PASSWORD}'
		CRYPT_PASSPHRASE='${CRYPT_PASSPHRASE}'
		CRYPT_SECONDPHRASE='${CRYPT_SECONDPHRASE}'
		EMERGE='${EMERGE}'

		chroot_main
		chroot_cleanup
	"
}

if [ "${EUID}" != 0 ]
then
	error "This script requires root privilege!"
	exit 1
fi

THIS_SCRIPT=$(basename "${BASH_SOURCE[0]}")
THIS_DIR=$(dirname "$(realpath "${BASH_SOURCE[0]}")")

ROOT_STORAGE=""
PARTITION_UEFI=""
PARTITION_SWAP=""
PARTITION_ROOT=""

INSTALL_ROOT=""
PORTAGE_MIRRORS=$(mirrorselect --interactive --output)

read -rp "${THIS_SCRIPT}: Enter hostname for the installation: " HOST_NAME
read -rp "${THIS_SCRIPT}: Enter username for the installation: " USER_NAME
get_passphrase "Enter a passphrase for the user: " USER_PASSWORD
get_passphrase "Enter a passphrase the root partition: " CRYPT_PASSPHRASE
get_passphrase "Enter a secondary passphrase the root partition: " CRYPT_SECONDPHRASE

EMERGE="nice --12 emerge --quiet-build"

main "${@}"
