#!/bin/bash

set -o errexit -o nounset -o noglob -o pipefail

THIS_SCRIPT=$(basename "$0")
readonly THIS_SCRIPT

info() {
    echo "$THIS_SCRIPT:" "$@"
}

error() {
    info "$@" >&2
}

cleanup() {
    info "Unmount the pseudo filesystems in the initramfs build directory."
    umount "$BUILD_DIR/proc"
    umount "$BUILD_DIR/sys"
    umount "$BUILD_DIR/dev"
    umount "$BUILD_DIR/run"
}

if [ "$EUID" != 0 ]
then
    error "This script requires root privilege!"
    exit 1
fi

trap cleanup EXIT

readonly SOURCE_DIR="/usr/src/initramfs"
BUILD_DIR=$(mktemp --directory --tmpdir "$THIS_SCRIPT.XXXXXXXXXX")
readonly BUILD_DIR
LINUX_VERSION=$(lslinux | fzf --header="Select a target linux kernel version.")
readonly LINUX_VERSION

info "Download a stage 3 tarball."
readonly ARCH="amd64"
readonly MIRROR="http://ftp.kaist.ac.kr/gentoo/releases"
wget --recursive --no-parent --no-directories --quiet \
    --directory-prefix="$BUILD_DIR/download" \
    --accept="stage3-$ARCH-hardened-openrc-*" \
    "$MIRROR/$ARCH/autobuilds/current-stage3-$ARCH-openrc/"

info "Extract the stage 3 tarball into the initramfs build directory."
find "$BUILD_DIR/download" -iname "stage3-*.tar.xz" \
    -exec tar --directory="$BUILD_DIR" \
        --use-compress-program="xz --threads=0" \
        --extract --preserve-permissions --file={} \
        --xattrs-include='*.*' --numeric-owner \;

info "Clean up the stage 3 tarball."
rm --recursive "$BUILD_DIR/download"

info "Mount the pseudo filesystems into the initramfs build directory."
mount --types="proc" /proc "$BUILD_DIR/proc"
mount --rbind /sys "$BUILD_DIR/sys"
mount --make-rslave "$BUILD_DIR/sys"
mount --rbind /dev "$BUILD_DIR/dev"
mount --make-rslave "$BUILD_DIR/dev"
mount --bind /run "$BUILD_DIR/run"
mount --make-rslave "$BUILD_DIR/run"

info "Copy files in the source directory into the build directory."
find "$SOURCE_DIR" -mindepth 1 -maxdepth 1 -exec cp --archive {} "$BUILD_DIR" \;

info "Copy my scripts into the initramfs build directory."
cp "$(locatebin mkpassphrase)" "$BUILD_DIR$(locatebin mkpassphrase)"

info "Install kernel modules into the initramfs build directory."
mkdir --parents "$BUILD_DIR/lib/modules/$LINUX_VERSION"
find "/lib/modules/$LINUX_VERSION" -mindepth 1 -maxdepth 1 \
    -exec cp --archive {} "$BUILD_DIR/lib/modules/$LINUX_VERSION" \;

# TODO: This increases initramfs size drastcally. Install only firmwares that
#       really matters into the initramfs.
info "Install kernel firmwares into the initramfs build directory."
mkdir --parents "$BUILD_DIR/lib/firmware"
find /lib/firmware -mindepth 1 -maxdepth 1 \
    -exec cp --archive {} "$BUILD_DIR/lib/firmware" \;

info "Configure DNS of the installation."
cp --dereference /etc/resolv.conf "$BUILD_DIR/etc/resolv.conf"

info "Configure Portage of the initramfs."
cp --archive /etc/portage/make.conf "$BUILD_DIR/etc/portage/make.conf"
mkdir --parents "$BUILD_DIR/etc/portage/repos.conf"
cp --archive /etc/portage/repos.conf/gentoo.conf "$BUILD_DIR/etc/portage/repos.conf/gentoo.conf"
chroot "$BUILD_DIR" emerge --sync
chroot "$BUILD_DIR" emerge-webrsync

info "Configure timezone of the initramfs."
cp --archive /etc/timezone "$BUILD_DIR/etc/timezone"
chroot "$BUILD_DIR" emerge --config sys-libs/timezone-data

# TODO: Automate this.
info "Configure locales of the initramfs."
cp --archive /etc/locale.gen "$BUILD_DIR/etc/locale.gen"
chroot "$BUILD_DIR" locale-gen
chroot "$BUILD_DIR" eselect locale list
read -rp "Select a locale: " locale
chroot "$BUILD_DIR" eselect locale set "$locale"

info "Configure hostname of the initramfs."
cp --archive /etc/conf.d/hostname "$BUILD_DIR/etc/conf.d/hostname"
cp --archive /etc/hosts "$BUILD_DIR/etc/hosts"

info "Install tpm2-tools into the initramfs."
chroot "$BUILD_DIR" emerge --autounmask --autounmask-write --autounmask-only app-crypt/tpm2-tools
chroot "$BUILD_DIR" 'echo "u" | dispatch-conf'
chroot "$BUILD_DIR" emerge app-crypt/tpm2-tools

info "Install cryptsetup into the initramfs."
chroot "$BUILD_DIR" emerge sys-fs/cryptsetup

info "Build and install the initramfs into /boot."
( cd "$BUILD_DIR" && find . -mindepth 1 -not -type c,b,s,p -print0 \
    | cpio --null --create --format="newc" \
    | xz --threads="0" > "/boot/initrd.img-$LINUX_VERSION" )
