#!/bin/bash
# Build and install an initramfs.
#
# Note that this script expects that `/usr/src/initramfs` directory contains all
# the necessary files.

set -o errexit -o nounset -o noglob -o pipefail

this_script=$(basename "${0}")

info() {
	echo "${this_script}:" "${@}"
}

error() {
	info "${@}" >&2
}

if [ "${EUID}" != 0 ]
then
	error "This script requires root privilege!"
	exit 1
fi

source_dir="/usr/src/initramfs"
build_dir=$(mktemp --directory --tmpdir "${this_script}.XXXXXXXXXX")
linux_version=$(lslinux | fzf --header="Select a target linux kernel version.")

info "Create pseudo filesystem mount points in the initramfs build directory."
for directory in /proc /sys /run /tmp
do
	mkdir --parents "${build_dir}${directory}"
done

info "Create a mount table symbolic link ini the initramfs build directory."
mkdir --parents "${build_dir}/etc"
ln --symbolic /proc/self/mounts "${build_dir}/etc/mtab"

info "Copy the initramfs source directory into the initramfs build directory."
find "${source_dir}" -mindepth 1 -maxdepth 1 \
	-exec cp --archive {} "${build_dir}" \;

info "Copy my scripts into the initramfs build directory."
mkdir --parents "${build_dir}/usr/local/bin"
cp "$(locatebin mkpassphrase)" "${build_dir}/usr/local/bin"

info "Set up a basic shell environment in the initramfs build directory."
rcopy "$(locatebin "bash")" "${build_dir}"
ln --symbolic "$(locatebin bash)" "${build_dir}/bin/sh"
for target in "sed" "stty" "echo" "find" "sleep" "[" "printf" "mount" "umount" \
	"switch_root" "findfs" "grep" "ls" "mktemp" "base64" "sha256sum" "awk" \
	"xxd" "whereis" "ldconfig" "mkdir" "cat"
do
	rcopy "$(locatebin "${target}")" "${build_dir}"
done

info "Install the ld.so dynamic linker into the initramfs build directory"
find /lib -type f -iname 'ld-linux.so.*' -exec rcopy {} "${build_dir}" \;

info "Install kernel module utils into the initramfs build directory."
rcopy "$(locatebin kmod)" "${build_dir}"

mkdir --parents "${build_dir}$(dirname "$(locatebin modprobe)")"
ln --symbolic "$(locatebin kmod)" "${build_dir}$(locatebin modprobe)"
mkdir --parents "${build_dir}/lib/modprobe.d"
find /lib/modprobe.d -mindepth 1 -maxdepth 1 \
	-exec cp --archive {} "${build_dir}/lib/modprobe.d" \;

mkdir --parents "${build_dir}$(dirname "$(locatebin modinfo)")"
ln --symbolic "$(locatebin kmod)" "${build_dir}$(locatebin modinfo)"

mkdir --parents "${build_dir}$(dirname "$(locatebin lsmod)")"
ln --symbolic "$(locatebin kmod)" "${build_dir}$(locatebin lsmod)"

mkdir --parents "${build_dir}$(dirname "$(locatebin insmod)")"
ln --symbolic "$(locatebin kmod)" "${build_dir}$(locatebin insmod)"

mkdir --parents "${build_dir}$(dirname "$(locatebin rmmod)")"
ln --symbolic "$(locatebin kmod)" "${build_dir}$(locatebin rmmod)"

info "Install kernel modules into the initramfs build directory."
mkdir --parents "${build_dir}/lib/modules/${linux_version}"
find "/lib/modules/${linux_version}" -mindepth 1 -maxdepth 1 \
	-exec cp --archive {} "${build_dir}/lib/modules/${linux_version}" \;

# XXX: This code blindly install all firmwares into the initramfs. That means,
# it can increase the size of the initramfs drastcailly. An assumption here is
# that there should be only *necessary* firmwares in /lib/firmware.
#
# This is quite different from other distro's approach but in Gentoo Linux this
# is the natural way for it. (at least, I think.)
info "Install kernel firmwares into the initramfs build directory."
mkdir --parents "${build_dir}/lib/firmware"
find /lib/firmware -mindepth 1 -maxdepth 1 \
	-exec cp --archive {} "${build_dir}/lib/firmware" \;

info "Install the udev into the initramfs build directory."
rcopy "$(locatebin udevadm)" "${build_dir}"
mkdir --parents "${build_dir}/lib/systemd"
ln --symbolic "$(locatebin udevadm)" "${build_dir}/lib/systemd/systemd-udevd"
mkdir --parents "${build_dir}/etc/udev"
cp --archive /etc/udev/udev.conf "${build_dir}/etc/udev"

info "Install udev rules into the initramfs build directory."
mkdir --parents "${build_dir}/lib/udev/rules.d"
for rules in 50-udev-default.rules 60-block.rules 60-persistent-storage.rules \
	75-net-description.rules 80-net-setup-link.rules 80-drivers.rules
do
	if [ -e "/etc/udev/rules.d/${rules}" ]
	then
		cp --archive "/etc/udev/rules.d/${rules}" \
			"${build_dir}/lib/udev/rules.d/"
	elif [ -e "/lib/udev/rules.d/${rules}" ]
	then
		cp --archive "/lib/udev/rules.d/${rules}" \
			"${build_dir}/lib/udev/rules.d/"
	fi
done

info "Install the tpm2-tools into the initramfs build directory."
rcopy "$(locatebin tpm2)" "${build_dir}"
# Copy tpm2-tools runtime dependencies (TCTI).
mkdir --parents "${build_dir}/usr/lib64"
find /usr/lib64 -iname 'libtss2-tcti-*' \
	-exec cp --archive {} "${build_dir}/usr/lib64" \;

info "Install the cryptsetup into the initramfs build directory."
rcopy "$(locatebin cryptsetup)" "${build_dir}"
# libpthread loads libgcc_s using dlopen. Need to handle it.
gcc_version="$(eselect gcc show | sed 's/x86_64-pc-linux-gnu-\(.*\)/\1/')"
# Why use `find` here? Note two things:
# 1. There may be two or more libgcc_s.so.1 (e.g, for x86 and x64).
# 2. Postfix ".1" is just for represeting binary interface... It's very unlikely
#	but it might be changed in the futhre.
find "/usr/lib/gcc/x86_64-pc-linux-gnu/${gcc_version}" -name "libgcc_s.so.[1-9]" \
	-exec rcopy "{}" "${build_dir}" \;
cp --archive /etc/ld.so.conf "${build_dir}/etc/ld.so.conf"
mkdir --parents "${build_dir}/etc/ld.so.conf.d"
find /etc/ld.so.conf.d -name '*gcc-x86_64-pc-linux-gnu.conf' \
	-exec cp --archive "{}" "${build_dir}/etc/ld.so.conf.d" \;
chroot "${build_dir}" ldconfig

info "Build and install the initramfs into /boot."
( cd "${build_dir}" && find . -mindepth 1 -print0 \
	| cpio --null --create --format="newc" \
	| gzip > "/boot/initrd.img-${linux_version}" )

info "Successfully built the initramfs!"
info "Clean up the initramfs build directory."
rm --recursive "${build_dir}"
