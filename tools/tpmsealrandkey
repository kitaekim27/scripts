#!/bin/bash
# Seal a random key into TPM persistent handle (0x81018000).

set -o errexit -o nounset -o noglob -o pipefail

info() {
	echo "$(basename "$0"):" "$@"
}

error() {
	info "$@" >&2
}

if [ "$EUID" != 0 ]
then
	error "This script requires root privilege!"
	exit 1
fi

tmpdir=$(mktemp --directory)

cleanup() {
	rm -r "${tmpdir}"
}

trap cleanup EXIT

info "Create a primary object in the endorsement hierarchy."
tpm2 createprimary --quiet --hierarchy="e" --key-context="${tmpdir}/primary.ctx"

info "Start a TPM HMAC trial session for building a policy."
tpm2 startauthsession --session="${tmpdir}/session.bin"

info "Generate a TPM policy with sha256 bank of PCR 0,2,4,8,9."
tpm2 policypcr \
	--quiet \
	--session="${tmpdir}/session.bin" \
	--pcr-list="sha256:0,2,4,8,9" \
	--policy="${tmpdir}/policy.bin"

info "Seal a random key into a TPM object with the policy."
dd if=/dev/urandom bs=128 count=1 status=none | tpm2 create \
	--quiet \
	--parent-context="${tmpdir}/primary.ctx" \
	--policy="${tmpdir}/policy.bin" \
	--key-context="${tmpdir}/key.ctx" \
	--sealing-input="-"

# Note that 0x81018000 is the first non-reserved persistent object handle in the
# endorsement hierarchy.
# See: TCG, "Registry of Reserved TPM 2.0 Handles and Localities"
info "Make the generated key object persistent in TPM."
# Try to evict existing object at 0x81018000 first.
# XXX: Make sure that there are no important objects at 0x81018000.
tpm2 evictcontrol --object-context="0x81018000" 2>/dev/null || :
tpm2 evictcontrol --object-context="${tmpdir}/key.ctx" 0x81018000
